FAIL
Test output failed to match any acceptable form.

Acceptable output:
  (syn-read) begin
  (syn-read) create "data"
  (syn-read) open "data"
  (syn-read) write "data"
  (syn-read) close "data"
  (syn-read) exec child 1 of 10: "child-syn-read 0"
  (syn-read) exec child 2 of 10: "child-syn-read 1"
  (syn-read) exec child 3 of 10: "child-syn-read 2"
  (syn-read) exec child 4 of 10: "child-syn-read 3"
  (syn-read) exec child 5 of 10: "child-syn-read 4"
  (syn-read) exec child 6 of 10: "child-syn-read 5"
  (syn-read) exec child 7 of 10: "child-syn-read 6"
  (syn-read) exec child 8 of 10: "child-syn-read 7"
  (syn-read) exec child 9 of 10: "child-syn-read 8"
  (syn-read) exec child 10 of 10: "child-syn-read 9"
  (syn-read) wait for child 1 of 10 returned 0 (expected 0)
  (syn-read) wait for child 2 of 10 returned 1 (expected 1)
  (syn-read) wait for child 3 of 10 returned 2 (expected 2)
  (syn-read) wait for child 4 of 10 returned 3 (expected 3)
  (syn-read) wait for child 5 of 10 returned 4 (expected 4)
  (syn-read) wait for child 6 of 10 returned 5 (expected 5)
  (syn-read) wait for child 7 of 10 returned 6 (expected 6)
  (syn-read) wait for child 8 of 10 returned 7 (expected 7)
  (syn-read) wait for child 9 of 10 returned 8 (expected 8)
  (syn-read) wait for child 10 of 10 returned 9 (expected 9)
  (syn-read) end
Differences in `diff -u' format:
+ argv: syn-read (null) argc: 1 
+ after argument stack
  (syn-read) begin
  (syn-read) create "data"
  (syn-read) open "data"
  (syn-read) write "data"
  (syn-read) close "data"
+ argv: child-syn-read 0 argc: 2 
+ after argument stack
  (syn-read) exec child 1 of 10: "child-syn-read 0"
+ argv: child-syn-read 1 argc: 2 
+ after argument stack
  (syn-read) exec child 2 of 10: "child-syn-read 1"
+ argv: child-syn-read 2 argc: 2 
+ after argument stack
  (syn-read) exec child 3 of 10: "child-syn-read 2"
+ argv: child-syn-read 3 argc: 2 
+ after argument stack
  (syn-read) exec child 4 of 10: "child-syn-read 3"
+ argv: child-syn-read 4 argc: 2 
+ after argument stack
  (syn-read) exec child 5 of 10: "child-syn-read 4"
+ argv: child-syn-read 5 argc: 2 
+ after argument stack
  (syn-read) exec child 6 of 10: "child-syn-read 5"
+ argv: child-syn-read 6 argc: 2 
+ after argument stack
  (syn-read) exec child 7 of 10: "child-syn-read 6"
+ argv: child-syn-read 7 argc: 2 
+ after argument stack
  (syn-read) exec child 8 of 10: "child-syn-read 7"
+ argv: child-syn-read 8 argc: 2 
+ after argument stack
  (syn-read) exec child 9 of 10: "child-syn-read 8"
+ argv: child-syn-read 9 argc: 2 
+ after argument stack
  (syn-read) exec child 10 of 10: "child-syn-read 9"
  (syn-read) wait for child 1 of 10 returned 0 (expected 0)
  (syn-read) wait for child 2 of 10 returned 1 (expected 1)
  (syn-read) wait for child 3 of 10 returned 2 (expected 2)
  (syn-read) wait for child 4 of 10 returned 3 (expected 3)
  (syn-read) wait for child 5 of 10 returned 4 (expected 4)
  (syn-read) wait for child 6 of 10 returned 5 (expected 5)
  (syn-read) wait for child 7 of 10 returned 6 (expected 6)
  (syn-read) wait for child 8 of 10 returned 7 (expected 7)
  (syn-read) wait for child 9 of 10 returned 8 (expected 8)
  (syn-read) wait for child 10 of 10 returned 9 (expected 9)
  (syn-read) end

(Process exit codes are excluded for matching purposes.)
